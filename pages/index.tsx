import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

const Home: NextPage = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>ADG Cairo canvas</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <p>
          The ADG library (Automatic Drawing Generation) is a set of
          functions focused on automating the drawing of mechanical
          parts.
        </p>
        <div className={styles.grid}>
          <a href="tutorial" className={styles.card}>
            <h2>Tutorial &rarr;</h2>
          </a>
          <a href="download" className={styles.card}>
            <h2>Download &rarr;</h2>
          </a>
          <a href="https://track.entidi.com/tag/adg/" className={styles.card}>
            <h2>Bug tracker &rarr;</h2>
          </a>
        </div>
        <p>
          When different parts share a similar shape, a custom
          application can be much more effective than the traditional
          way of manually drawing every part with a CAD. In some
          production factories, such as the automotive sector, this is
          quite common. Nozzles, elements, nuts, valves, needles and a
          lot of other parts fall into this category.
        </p>
        <p>
          You can reach similar targets by using parametric CADs, but a
          custom application provides the following benefits:
        </p>
        <ul>
          <li>
            <b>more extensible</b><br/>
            you are not tied to a single interface nor forced to
            interact with the user: you have a lot of ways for feeding
            the same application logic;
          </li>
          <li>
            <b>more customizable</b><br/>
            if you have to create an application from the ground: you
            can do whatever you want;
          </li>
          <li>
            <b>not so bloated as a parametric CAD</b><br/>
            this honestly depends on the application but, talking in
            general, ADG doesn't have a lot of stuff a CAD system must
            have, such as a GUI for user interactions;
          </li>
          <li>
            <b>can be easily connected to a database</b><br/>
            the model-view separation greatly improves the connectivity
            of the application;
          </li>
          <li>
            <b>the drawings can be generated on the fly</b><br/>
            the canvas does not enforce user interaction: this feature
            can be used in a dynamic site or in a web-based application
            by automatically generating the drawing only when the page
            is accessed, giving an always up to date website.
          </li>
        </ul>
        <p>
          Although ADG is developed in C using an object-oriented
          approach, the applications based on it are expected to be
          developed using higher-level languages and especially
          garbage-collected ones.
        </p>
        <p>
          Its components (such as model handling, user interface support
          and drawing customization) are fully decoupled, making
          possible for instance to build the project on a headless
          server for web applications support. Check out the Technical
          details page for further information.
        </p>
        <p>
          The project is cross-platform. It is known to build on various
          flavour of GNU/Linux systems (Archlinux, Slackware and
          Ubuntu), FreeBSD, OpenSolaris and Windows XP (either by
          cross-compiling from GNU/Linux systems or by natively building
          it on a MinGW environment).
        </p>
      </main>

      <footer className={styles.footer}>
        Developed by
        <a href="https://www.entidi.com">
          <Image src="/entidi.svg" alt="eNTiDi logo" width={16} height={16} />
          &nbsp;eNTiDi software
        </a>
      </footer>
    </div>
  )
}

export default Home
